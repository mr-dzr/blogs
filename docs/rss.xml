<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://mr-dzr.github.io/blogs</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://mr-dzr.github.io/blogs</link></image><lastBuildDate>Thu, 08 May 2025 09:29:07 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>Nginx 从安装到高可用，一篇搞定</title><link>https://mr-dzr.github.io/blogs/post/Nginx%20-cong-an-zhuang-dao-gao-ke-yong-%EF%BC%8C-yi-pian-gao-ding.html</link><description>架构文摘 2022-01-23 12:57

## 一、Nginx 安装

### 1、去官网[http://nginx.org/下载对应的 nginx](http://nginx.org/%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84nginx)包，推荐使用稳定版本

### 2、上传 nginx 到 linux 系统

### 3、安装依赖环境

#### (1)安装 gcc 环境

```shell
yum install gcc-c++
```

#### (2)安装 PCRE 库，用于解析正则表达式

```shell
yum install -y pcre pcre-devel
```

#### (3)zlib 压缩和解压缩依赖

```shell
yum install -y zlib zlib-devel
```

#### (4)SSL 安全的加密的套接字协议层，用于 HTTP 安全传输，也就是 https

```shell
yum install -y openssl openssl-devel
```

### 4、解压，需要注意，解压后得到的是源码，源码需要编译后才能安装

```shell
tar -zxvf nginx-1.16.1.tar.gz
```

### 5、编译之前，先创建 nginx 临时目录，如果不创建，在启动 nginx 的过程中会报错

```shell
mkdir /var/temp/nginx -p
```

### 6、在 nginx 目录，输入如下命令进行配置，目的是为了创建 makefile 文件

```shell
./configure
--prefix=/usr/local/nginx
--pid-path=/var/run/nginx/nginx.pid
--lock-path=/var/lock/nginx.lock
--error-log-path=/var/log/nginx/error.log
--http-log-path=/var/log/nginx/access.log
--with-http_gzip_static_module
--http-client-body-temp-path=/var/temp/nginx/client
--http-proxy-temp-path=/var/temp/nginx/proxy
--http-fastcgi-temp-path=/var/temp/nginx/fastcgi
--http-uwsgi-temp-path=/var/temp/nginx/uwsgi
--http-scgi-temp-path=/var/temp/nginx/scgi
```

注：代表在命令行中换行，用于提高可读性配置命令：

|              命令              |                  解释                  |
| :----------------------------: | :------------------------------------: |
|            --prefix            |            指定 nginx 目录             |
|           --pid-path           |           指定 nginx 的 pid            |
|          --lock-path           |   锁定安装文件，防止恶意篡改或误操作   |
|        --error-log-path        |              错误日志目录              |
|        --http-log-path         |                  日志                  |
| --with-http_gzip_static_module | 启用 gzip 模块，在线实时压缩输出数据流 |
|  --http-client-body-temp-path  |         设置客户端请求临时目录         |
|     --http-proxy-temp-path     |         设置 http 代理临时目录         |
|    --http-fastcgi-temp-path    |          设置 fastcg 临时目录          |
|     --http-uwsgi-temp-path     |          设定 uwsgi 临时目录           |
|     --http-scgi-temp-path      |           设置 scgi 临时目录           |

7、make 编译&amp;安装

```shell
make
make install
```

### 8、进入 sbin 目录启动 nginx

```shell
启动：nginx
停止：./nginx -s stop
重新加载：./nginx -s reload
```

## 二、配置反向代理

### 1、配置 upstream

```shell
upstream [proxyName] {
    server 192.168.1.173:8080;
    server 192.168.1.174:8080;
    server 192.168.1.175:8080;
}
```

### 2、配置 server

```shell
server {
    listem  80;
    server_name www.tomcats.com;    location / {
        proxy_pass http://tomcats;
    }
}
```

## 三、配置负载均衡

nginx 默认采用轮训的方式进行负载均衡

### 1、使用加权轮询

```shell
upstream [proxyName] {
    server 192.168.1.173:8080 weight=1;
    server 192.168.1.174:8080 weight=5;
    server 192.168.1.175:8080 weight=2;
}
```

### 2、hash 负载均衡

```shell
upstream [proxyName] {
    ip_hash
    server 192.168.1.173:8080;
    server 192.168.1.174:8080;
    server 192.168.1.175:8080;
}
```

hash 算法实际上只会计算 192.168.1 这段做哈希

使用 ip_hash 的注意点：

不能把后台服务器直接移除，只能标记 down.

### 3、url hash 负载均衡

```shell
upstream [proxyName] {
    hash $request_url;
    server 192.168.1.173:8080;
    server 192.168.1.174:8080;
    server 192.168.1.175:8080;
}
```

### 4、最小连接负载均衡

```shell
upstream [proxyName] {
    least_conn;
    server 192.168.1.173:8080;
    server 192.168.1.174:8080;
    server 192.168.1.175:8080;
}
```

## 四、upstream 指令参数

`max_conns`：限制最大同时连接数 1.11.5 之前只能用于商业版

`slow_start`：单位秒，权重在指定时间内从 1 上升到指定值，不适用与 hash 负载均衡、随机负载均衡 如果在 upstream 中只有一台 server，则该参数失效（商业版才有）

`down`：禁止访问

`backup`：备用机 只有在其他服务器无法访问的时候才能访问到 不适用与 hash 负载均衡、随机负载均衡

`max_fails`：表示失败几次，则标记 server 已宕机，剔出上游服务 默认值 1

`fail_timeout`：表示失败的重试时间 默认值 10

### 1、keepalived

```shell
upstream [proxyName] {
    server 192.168.1.173:8080 weight=1;
    server 192.168.1.174:8080 weight=5;
    server 192.168.1.175:8080 weight=2;
    keepalive 32; #保持的连接数
}
server {
    listem  80;
    server_name www.tomcats.com;    location / {
        proxy_pass http://tomcats;
        proxy_http_version 1.1; #连接的协议版本
        proxy_set_header Connection ''; 清空连接请求头
    }
}
```

### 2、控制浏览器缓存

```shell
server {
    listem  80;
    server_name www.tomcats.com;

    location / {
        proxy_pass http://tomcats;
               expires 10s;  #浏览器缓存10秒钟
               #expires @22h30m  #在晚上10点30的时候过期
               #expires -1h  #缓存在一小时前时效
               #expires epoch  #不设置缓存
               #expires off  #缓存关闭，浏览器自己控制缓存
               #expires max  #最大过期时间
    }
}
```

### 3、反向代理缓存

```shell
upstream [proxyName] {
    server 192.168.1.173:8080 weight=1;
    server 192.168.1.174:8080 weight=5;
    server 192.168.1.175:8080 weight=2;
}
#proxy_cache_path 设置缓存保存的目录的位置
#keys_zone设置共享内以及占用的空间大小
#mas_size 设置缓存最大空间
#inactive 缓存过期时间，错过此时间自动清理
#use_temp_path 关闭零时目录
proxy_cache_path /usr/local/nginx/upsteam_cache keys_zone=mycache:5m max_size=1g inactive=8h use_temp_path=off;
server {
    listem  80;
    server_name www.tomcats.com;
    #开启并使用缓存
    proxy_cache mycache;
    #针对200和304响应码的缓存过期时间
    proxy_cache_valid 200 304 8h;

    location / {
        proxy_pass http://tomcats;
    }
}
```

## 五、配置 ssl 证书提供 https 访问

### 1. 安装 SSL 模块

要在 nginx 中配置 https，就必须安装 ssl 模块，也就是: `http_ssl_module`。</description><guid isPermaLink="true">https://mr-dzr.github.io/blogs/post/Nginx%20-cong-an-zhuang-dao-gao-ke-yong-%EF%BC%8C-yi-pian-gao-ding.html</guid><pubDate>Thu, 08 May 2025 09:28:41 +0000</pubDate></item></channel></rss>